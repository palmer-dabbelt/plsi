# Core configuration options and defaults for hammer-vlsi.
# The values specified in this file are the defaults.
# e.g. foo: "bar" in this file means that the default setting for foo is "bar".

vlsi.core:
  # Path(s) to out-of-tree hammer technology libraries.
  technology_path: ["${vlsi.builtins.hammer_vlsi_path}/technology"]
  technology_path_meta: subst

  # Technology to use. hammer-vlsi will read this and load the appropriate technology libraries.
  technology: "saed32"

  # Technology node dimension (nm) to use.
  # Some tools change what they do as this changes.
  # TODO: move this to vlsi.technology
  node: 32

  # Path(s) to synthesis tools.
  # Add the built-in path to synthesis tools.
  synthesis_tool_path: ["${vlsi.builtins.hammer_vlsi_path}/synthesis"]
  synthesis_tool_path_meta: subst

  # Path(s) to place and route tools.
  # Add the built-in path to place and route tools.
  par_tool_path: ["${vlsi.builtins.hammer_vlsi_path}/par"]
  par_tool_path_meta: subst

  # Path(s) to drc tools.
  # Add the built-in path to drc tools.
  drc_tool_path: ["${vlsi.builtins.hammer_vlsi_path}/drc"]
  drc_tool_path_meta: subst

  # Path(s) to lvs tools.
  # Add the built-in path to lvs tools.
  lvs_tool_path: ["${vlsi.builtins.hammer_vlsi_path}/lvs"]
  lvs_tool_path_meta: subst

  # Synthesis tool to use.
  # Currently we can choose from a selection of built-in tools which hammer-vlsi supports.
  synthesis_tool: "nop"

  # Place and route tool to use.
  par_tool: "nop"

  # DRC tool to use.
  drc_tool: "nop"

  # LVS tool to use.
  lvs_tool: "nop"

  # Maximum threads to use in a CAD tool invocation.
  max_threads: 1

vlsi.technology:
  # Placement site for macros. (Optional[str])
  # Typically specified in standard cell LEFs.
  # See http://www.ispd.cc/contests/18/lefdefref.pdf
  # Required for some CAD tools to function properly.
  placement_site: null

  # Extra semiconductor IP libraries/stdcell libs/hard macros. (List[ExtraLibrary])
  # Used for non-technology-vendor-provided custom IP blocks.
  # ExtraLibrary is a struct with two fields:
  # - prefix (Optional[PathPrefix]) - struct that holds a prefix and path.
  #   - path (str) - Path for the prefix below.
  #     For example, if the path is /foo/bar/pll, then a reference of pll/test.txt (assuming 'pll' is the prefix) will
  #     resolve to /foo/bar/pll/test.txt.
  #   - prefix (str) - prefix used for referencing in the library.
  #     For example, if "lef file" in HammerLibrary references "pll/layout/pll.lef", then the path would be "pll".
  # - library (hammer_tech.HammerLibrary) - IP library to add.
  # Extra libraries are added at the end of the library list, in the event that order matters.
  extra_libraries: []

cadence:
  # Path to the folder with defaults.yml for common Cadence settings.
  common_path: "${vlsi.builtins.hammer_vlsi_path}/common/cadence"
  common_path_meta: subst

# General VLSI inputs.
# These will vary per run of hammer-vlsi.
vlsi.inputs:
  # Supply voltages.
  supplies:
    VDD: "0.85 V"
    GND: "0 V"

  hierarchical:
    # Hierarchical par mode. (str)
    # Valid options:
    # flat - Perform a flat place and route run.
    # leaf - Leaf module in a hierarchical run - same as flat except that an extra write_ilm step is added.
    # hierarchical - Module which has sub-modules which are also hierarchical.
    # top - Top module in a hierarchical run - runs an extra assemble_design step.
    mode: flat

    # Top RTL module in the hierarchical flow. (str)
    # Not to be confused with synthesis.inputs.top_module which specifies the synthesis module for this run.
    # (e.g. synthesis.inputs.top_module is used for a sub-synthesis run)
    top_module: "null"

    # Used by HammerDriver to generate configurations for hierarchical place-and-route.
    # type: (str)
    # Valid options:
    # none - Do nothing. (default)
    # manual - Read from hierarchical_manual_* below.
    # from_placement - Generate from "hierarchical" entries in vlsi.inputs.placement_constraints.
    config_source: none

    # Manual hierarchical definitions used only if hierarchical_definition_source is set to manual mode.
    # Should be a list along the lines of [{"module1": "module1_sub1", "module1_sub2", "module2": "module2_sub"}].
    manual_modules: []

    # Manual hierarchical placement constraints used only if hierarchical_definition_source is set to manual mode.
    # Should be a list along the lines of [{"module1": <list of PlacementConstraint structs>}].
    manual_placement_constraints: []

  # ILMs for hierarchical mode.
  # ILM struct (ILMStruct) members:
  # dir (str) - directory to the ILMs (...ILMDir)
  # data_dir (str) - data directory to the ILMs (...ILMDir/mmmc/...)
  # module (str) - module name for the ILM
  # lef (str) - path to the LEF file
  ilms: []

  # Muli-mode multi-corner setups, overrides supplies
  # MMMC struct members:
  # name (str) - name of the corner.
  # type (str) - One of the following:
  # - "setup" (corner used for setup timing)
  # - "hold" (corner used for hold timing)
  # - "extra" (misc. corner potentially used for power analysis
  # voltage (str) - voltage of the corner should match tech json
  # temp (str) - temperature of the corner should match tech json
  mmmc_corners: []

  # Clock ports of the top-level module.
  # Clock struct members:
  # name (str) - Name of the clock port.
  # period (TimeValue) - Clock port period. e.g. "1 ns", "5ns". Default units: ns
  # port (str) - Optional. If specified, this is the RTL path to the clock. Otherwise, the path is the same as the name.
  # uncertainty (TimeValue) - Optional. Clock uncertainty. e.g. "1 ns", "5ns". Default units: ns
  clocks: []

  # Default output pin load capacitance.
  # Default: 1pF
  default_output_load: 1

  # List of output load constraints.
  # Each item in the list should be a struct with the following members:
  # name (str) - Name of the output load (e.g. io_out)
  # load (float) - Output load capacitance in pF.
  output_loads: []

  # List of placement constraints.
  # Each item is a struct member:
  # path (str) - Path to the given instance
  # type (str) - One of the following:
  # - "dummy" (does nothing with this constraint)
  # - "placement" (creates a placement constraint for an instance)
  # - "toplevel" (top-level chip dimensions; may only occur once, for the top-level module)
  # - "hardmacro" (places this hard macro at a particular spot)
  # - "hierarchical" (marks this instance as part of hierarchical place and route)
  # - "obstruction" (creates a blockage at a particular spot; see obs_types)
  # TODO(edwardw): add rotation
  # x (float) - x coordinate in um
  # y (float) - y coordinate in um
  # width (float) - width in um
  # height (float) - height in um
  # layers (List[str]) - Optional: only used for obstruction type. 
  #   If specified, a list of strings that enumerates layer(s) blocked by the obstruction otherwise all layers are blocked
  # obs_types (List[str]) - Required for obstruction type. A list of one or more of the following:
  # - "place" - This obstruction type stops the placement of standard cells inside it
  # - "route" - This obstruction type stops all routing inside it
  # - "power" - This obstruction type stops only power routing/straps inside it
  placement_constraints: []

  # Don't use list mode. (str)
  # Specifies where to get the list of cells to not use.
  # These cells can be specified in a number of ways:
  # - "MY_CELL" (cell MY_CELL in any library)
  # - "*/MY_CELL" (cell MY_CELL in any library)
  # - "*CELL" (any cell that ends with CELL in any library)
  # - "*_CELL_*" (any cell that matches the wildcard *_CELL_* in any library)
  # - "CELL_*_IVX" (any cell that matches the wildcard CELL_*_IVX in any library)
  # - "MY_LIB/*" (any cell under the library MY_LIB)
  # - "MY_LIB/CELL*" (any cell that matches the wildcard CELL* under the library MY_LIB)
  # Valid options:
  # auto - Use the technology plugin's value for the don't use list
  # manual - Use the list from the variable below, overriding the technology plugin
  # append - Append the manual list to the technology plugin's list
  dont_use_mode: auto
  # Optional: List of cells to mark as don't use
  # type: List[str]
  dont_use_list: []

vlsi.submit:
  # The submit command to use. "none", "local", or null will run on the current host. See hammer_submit_command.py for other options.
  command: "local"
  # type: List[Dict[str, Dict[str, Any]]]
  # The list substitutes settings in order of appearance, and the first Dict key is the command.
  # The second dict key is the name of that command's setting, followed by whatever type it takes.
  settings: []

# Specific inputs for the synthesis tool.
# These inputs are the generic inputs; specific tools ("CAD junk") may require
# additional inputs.
# They will vary per run of hammer-vlsi.
synthesis.inputs:
  # Input files.
  # Typically a list of Verilog/VHDL files, depending on the synthesis tool.
  input_files: []

  # Top RTL module.
  # Set to null to not specify from the JSON.
  top_module: null

# inherit settings from vlsi.submit but allow us to override them
synthesis.submit:
  command: "${vlsi.submit.command}"
  command_meta: lazysubst
  settings: "vlsi.submit.settings"
  settings_meta: lazycrossref

# Specific inputs for the place and route tool.
# These inputs are the generic inputs; specific tools ("CAD junk") may require
# additional inputs.
# They will vary per run of hammer-vlsi.
par.inputs:
  # Input post-synthesis netlist files.
  # Typically a list of Verilog/VHDL files, depending on the tool.
  # For place and route, these should typically be post-synthesis netlists.
  input_files: []

  # Top RTL module.
  top_module: null

  # Optional: SDC input file from post-synthesis.
  # Leave as null to not use.
  post_synth_sdc: null

  # GDS output map mode.
  # type: str
  # The GDS map file shows how/what layers should be put in the GDSII file.
  # Valid options:
  # auto - Use the technology plugin's value for the map file.
  # empty - Don't use a map file at all and let the cad tool do what it wants.
  #         This often results in a complete but arbitrary assignment.
  # manual - Read the map file from the variable below, overriding the technology plugin.
  gds_map_mode: auto
  # Optional: GDS map file path. Used only if gds_map_mode above is set to manual.
  # type: Optional[str]
  gds_map_file: null

  # If true, tell the place and route tool to merge any library/macro GDSes into
  # the final GDS.
  # type: bool
  gds_merge: false

# inherit settings from vlsi.submit but allow us to override them
par.submit:
  command: "${vlsi.submit.command}"
  command_meta: lazysubst
  settings: "vlsi.submit.settings"
  settings_meta: lazycrossref

# DRC settings
drc.inputs:
  # Top RTL module.
  top_module: null

  # Input layout file
  # Typically a GDSII file from the place and route tool
  layout_file: null

  # Valid modes are auto, manual, prepend, and append
  additional_drc_text_mode: "auto"
  # Custom DRC command text to add after the boilerplate commands at the top of the run file
  additional_drc_text: ""

# inherit settings from vlsi.submit but allow us to override them
drc.submit:
  command: "${vlsi.submit.command}"
  command_meta: lazysubst
  settings: "vlsi.submit.settings"
  settings_meta: lazycrossref

# LVS settings
lvs.inputs:
  # Top RTL module.
  top_module: null

  # Input layout file
  # Typically a GDSII file from the place and route tool
  layout_file: null

  # Input list of schematic files
  schematic_files: []

  # Valid modes are auto, manual, prepend, and append
  additional_lvs_text_mode: "auto"
  # Custom LVS command text to add after the boilerplate commands at the top of the run file
  additional_lvs_text: ""

lvs.submit:
  command: "${vlsi.submit.command}"
  command_meta: lazysubst
  settings: "vlsi.submit.settings"
  settings_meta: lazycrossref
