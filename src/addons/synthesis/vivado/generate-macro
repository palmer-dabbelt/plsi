#!/bin/bash
# Generate a single Xilinx Verilog SRAM blackbox.
# Usage: ./generate-macro \
#          --sram-module <name> \
#          --width <width in bits> \
#          --depth <depth - number of entries> \
#          [--dcp <path to the binary .dcp to dump] \
#          [other arguments]

workdir_tag="vivado_macro_gen_${RANDOM}"

script_dir="$(dirname "$0")"
source "$script_dir/vivado_common.sh"

# Now onto the business of generating SRAM Verilog modules.

SRAM_MODULE="$sram_module" # overall memory module name
# So, Vivado doesn't like module names which start/end with underscore.
# See error Synth 8-2139...
SRAM_BLACKBOX_NAME="inner${SRAM_MODULE}_inner" # use an internal name since we need to do a little wrapping (e.g. for separate write_enable & mask)
SRAM_WIDTH=$width
SRAM_DEPTH=$depth

cat > $workdir/memgen.tcl <<EOF
# TCL fragment to set generate some memories.

create_ip -name blk_mem_gen -vendor xilinx.com -library ip -version 8.3 -module_name ${SRAM_BLACKBOX_NAME}
set_property -dict [list \
  CONFIG.Use_Byte_Write_Enable {true} \
  CONFIG.Byte_Size {8} \
  CONFIG.Enable_A {Always_Enabled} \
  CONFIG.Write_Width_A {${SRAM_WIDTH}} \
  CONFIG.Write_Depth_A {${SRAM_DEPTH}} \
  CONFIG.Read_Width_A {${SRAM_WIDTH}} \
  CONFIG.Write_Width_B {${SRAM_WIDTH}} \
  CONFIG.Read_Width_B {${SRAM_WIDTH}} \
] [get_ips ${SRAM_BLACKBOX_NAME}]
generate_target {instantiation_template} [get_files ${SRAM_BLACKBOX_NAME}.xci]
update_compile_order -fileset sources_1

set_property GENERATE_SYNTH_CHECKPOINT TRUE [get_files ${SRAM_BLACKBOX_NAME}.xci]

generate_target all [get_files ${SRAM_BLACKBOX_NAME}.xci]

export_ip_user_files -of_objects [get_files ${SRAM_BLACKBOX_NAME}.xci] -no_script -force

# Need this to export the stub/blackbox Verilog files. Important!
synth_ip [get_ips ${SRAM_BLACKBOX_NAME}]

# Note: make sure to mkdir these directories first. SAD!
export_simulation -of_objects [get_files ${SRAM_BLACKBOX_NAME}.xci] -directory sim_scripts -ip_user_files_dir ip_user_files -ipstatic_source_dir ipstatic -force

#set simobjs [get_files -compile_order sources -used_in simulation -of [get_files ${SRAM_BLACKBOX_NAME}.xci]]

EOF

cd $workdir
# SAD!
mkdir -p sim_scripts
mkdir -p ip_user_files
mkdir -p ipstatic
EXTRA_VSRCS=$EXTRA_VSRCS $vivado $VIVADOFLAGS -source memgen.tcl

# Clean output file just in case
rm -f "$output"

# Extract Verilog stub/blackbox
EXPECTED_OUTPUT_FILE="$workdir/.srcs/sources_1/ip/$SRAM_BLACKBOX_NAME/${SRAM_BLACKBOX_NAME}_stub.v"
if [ ! -f "$EXPECTED_OUTPUT_FILE" ]; then
    echo "Expected Verilog stub/blackbox not found at ${EXPECTED_OUTPUT_FILE}!"
    exit 1
fi

EXPECTED_OUTPUT_DCP="$workdir/.srcs/sources_1/ip/$SRAM_BLACKBOX_NAME/${SRAM_BLACKBOX_NAME}.dcp"
if [ ! -f "$EXPECTED_OUTPUT_FILE" ]; then
    echo "Expected .dcp not found at ${EXPECTED_OUTPUT_DCP}!"
    exit 1
fi

cp "$EXPECTED_OUTPUT_FILE" "$output"

# Add the wrapper (e.g. for write_enable)
cat >> "$output" <<EOF
module ${SRAM_MODULE}(
  input [11:0] addr,
  input clock,
  output [31:0] data_out,
  input [31:0] data_in,
  input [3:0] mask,
  input write_enable
);
wire [3:0] mask_int;
assign mask_int = write_enable ? mask : 4'd0;
${SRAM_BLACKBOX_NAME} mem(
  .clka(clock),
  .douta(data_out),
  .dina(data_in),
  .addra(addr),
  .wea(mask_int)
);
endmodule
EOF

if [ -n "$dcp" ]; then
    echo "--dcp specified, copying macro .dcp for synthesis";
    cp $EXPECTED_OUTPUT_DCP $dcp
fi

# TODO: extract simulation Verilog files too!
